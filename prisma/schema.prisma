generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  username      String  @unique
  accessToken   String
  userId        String  @unique
  isActive      Boolean @default(true)
  /// points accrued for active ecosystem participation / bought
  points        Int     @default(0)
  /// username of user's referrer
  referrer      String?
  /// no of users referred
  noOfReferrals Int     @default(0)

  predictions Prediction[]
  badges      UserBadge[]
  guilds      UserToGuild[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competition {
  id String @id @default(cuid())

  apiLeagueId Int
  name        String
  type        CompetitionType
  logo        String
  season      Int
  isActive    Boolean

  fixtures Fixture[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fixture {
  id Int @id

  status    FixtureStatus   @default(NOT_STARTED)
  timestamp Int
  date      DateTime
  round     String
  homeGoals Int?
  awayGoals Int?
  outcome   FixtureOutcome?

  homeTeamId    Int
  homeTeam      Team         @relation(name: "homeTeam", fields: [homeTeamId], references: [id])
  awayTeamId    Int
  awayTeam      Team         @relation(name: "awayTeam", fields: [awayTeamId], references: [id])
  competitionId String
  competition   Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  predictions   Prediction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id Int @id

  name String
  logo String

  homeFixtures Fixture[] @relation(name: "homeTeam")
  awayFixtures Fixture[] @relation(name: "awayTeam")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prediction {
  id String @id @default(cuid())

  homeGoals        Int
  awayGoals        Int
  // only edit with same outcome(+3) and same score(+10)
  points           Int            @default(1)
  predictedOutcome FixtureOutcome

  username  String
  user      User    @relation(fields: [username], references: [username])
  fixtureId Int
  fixture   Fixture @relation(fields: [fixtureId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, fixtureId], name: "predictionId")
}

/// A FutbolPi payment
model Payment {
  amount     Float
  txId       String?
  paymentId  String              @unique
  isRefunded Boolean             @default(false)
  type       PiTransactionType
  status     PiTransactionStatus @default(INITIALIZED)
  purposeId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id             String @id @default(cuid())
  name           String @unique
  requiredPoints Int
  description    String
  icon           String
  color          String

  users UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBadge {
  id Int @default(autoincrement())

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id])

  @@id([userId, badgeId], name: "userBadgeId")
}

model Guild {
  id          String @id @default(cuid())
  slug        String @unique
  name        String
  description String

  txId      String?
  paymentId String  @unique

  members UserToGuild[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserToGuild {
  id   Int       @unique @default(autoincrement())
  role GuildRole @default(MEMBER)

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])

  @@id([userId, guildId], name: "userGuildId")
}

enum PiTransactionType {
  TIP
}

enum PiTransactionStatus {
  INITIALIZED
  COMPLETED
  CANCELLED
}

enum CompetitionType {
  Cup
  League
}

enum FixtureStatus {
  NOT_STARTED
  FINISHED
  COMPLETED
}

enum FixtureOutcome {
  HOME_WIN
  AWAY_WIN
  DRAW
}

enum GuildRole {
  OWNER
  ADMIN
  MEMBER
}
